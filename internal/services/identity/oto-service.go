// Code generated by oto; DO NOT EDIT.

package identity

import (
	"context"
	"net/http"

	"github.com/mdhender/wraith/internal/otohttp"
)

// IdentityService provides methods to create, update, and authenticate users.
type IdentityService interface {

	// AuthenticateUser verifies the email and secret against the stored values. It
	// returns the user data if successful.
	AuthenticateUser(context.Context, AuthenticateUserRequest) (*UserResponse, error)
	// CreateUser creates a new user and returns the user data if successful.
	CreateUser(context.Context, CreateUserRequest) (*UserResponse, error)
	// DeleteUser deletes an existing user and returns the old user data if successful.
	DeleteUser(context.Context, DeleteUserRequest) (*UserResponse, error)
	// FetchUser retrieves an existing user and returns the user data if successful.
	FetchUser(context.Context, FetchUserRequest) (*UserResponse, error)
	// UpdateUser updates an existing user and returns the updated user data if
	// successful.
	UpdateUser(context.Context, UpdateUserRequest) (*UserResponse, error)
}

type identityServiceServer struct {
	server          *otohttp.Server
	identityService IdentityService
}

// Register adds the IdentityService to the otohttp.Server.
func RegisterIdentityService(server *otohttp.Server, identityService IdentityService) {
	handler := &identityServiceServer{
		server:          server,
		identityService: identityService,
	}
	server.Register("IdentityService", "AuthenticateUser", handler.handleAuthenticateUser)
	server.Register("IdentityService", "CreateUser", handler.handleCreateUser)
	server.Register("IdentityService", "DeleteUser", handler.handleDeleteUser)
	server.Register("IdentityService", "FetchUser", handler.handleFetchUser)
	server.Register("IdentityService", "UpdateUser", handler.handleUpdateUser)
}

func (s *identityServiceServer) handleAuthenticateUser(w http.ResponseWriter, r *http.Request) {
	var request AuthenticateUserRequest
	if err := otohttp.Decode(r, &request); err != nil {
		s.server.OnErr(w, r, err)
		return
	}
	response, err := s.identityService.AuthenticateUser(r.Context(), request)
	if err != nil {
		s.server.OnErr(w, r, err)
		return
	}
	if err := otohttp.Encode(w, r, http.StatusOK, response); err != nil {
		s.server.OnErr(w, r, err)
		return
	}
}

func (s *identityServiceServer) handleCreateUser(w http.ResponseWriter, r *http.Request) {
	var request CreateUserRequest
	if err := otohttp.Decode(r, &request); err != nil {
		s.server.OnErr(w, r, err)
		return
	}
	response, err := s.identityService.CreateUser(r.Context(), request)
	if err != nil {
		s.server.OnErr(w, r, err)
		return
	}
	if err := otohttp.Encode(w, r, http.StatusOK, response); err != nil {
		s.server.OnErr(w, r, err)
		return
	}
}

func (s *identityServiceServer) handleDeleteUser(w http.ResponseWriter, r *http.Request) {
	var request DeleteUserRequest
	if err := otohttp.Decode(r, &request); err != nil {
		s.server.OnErr(w, r, err)
		return
	}
	response, err := s.identityService.DeleteUser(r.Context(), request)
	if err != nil {
		s.server.OnErr(w, r, err)
		return
	}
	if err := otohttp.Encode(w, r, http.StatusOK, response); err != nil {
		s.server.OnErr(w, r, err)
		return
	}
}

func (s *identityServiceServer) handleFetchUser(w http.ResponseWriter, r *http.Request) {
	var request FetchUserRequest
	if err := otohttp.Decode(r, &request); err != nil {
		s.server.OnErr(w, r, err)
		return
	}
	response, err := s.identityService.FetchUser(r.Context(), request)
	if err != nil {
		s.server.OnErr(w, r, err)
		return
	}
	if err := otohttp.Encode(w, r, http.StatusOK, response); err != nil {
		s.server.OnErr(w, r, err)
		return
	}
}

func (s *identityServiceServer) handleUpdateUser(w http.ResponseWriter, r *http.Request) {
	var request UpdateUserRequest
	if err := otohttp.Decode(r, &request); err != nil {
		s.server.OnErr(w, r, err)
		return
	}
	response, err := s.identityService.UpdateUser(r.Context(), request)
	if err != nil {
		s.server.OnErr(w, r, err)
		return
	}
	if err := otohttp.Encode(w, r, http.StatusOK, response); err != nil {
		s.server.OnErr(w, r, err)
		return
	}
}

// AuthenticateUserRequest is the request object for IdentityService.Authenticate.
// The caller must supply an email or handle, never both.
type AuthenticateUserRequest struct {
	// Email is the e-mail address the user registered with. Optional - omit or set to
	// null if not using.
	Email *string `json:"email"`
	// Handle is the nickname for the user. Optional - omit or set to null if not
	// using.
	Handle *string `json:"handle"`
	// Secret is the hex-encoded passphrase used to authenticate the request. Required.
	Secret string `json:"secret"`
}

// AuthenticatedUserResponse is the response object containing the user's bearer
// token if authenticated.
type AuthenticatedUserResponse struct {
	// Id is the unique identifier for the user.
	Id string `json:"id"`
	// Email is the e-mail address the user registered with.
	Email string `json:"email"`
	// Handle is the nickname for the user.
	Handle string `json:"handle"`
	// Roles is the list of roles granted to the user.
	Roles []string `json:"roles"`
}

// CreateUserRequest is the request object for IdentityService.CreateUser.
type CreateUserRequest struct {
	// Email is the e-mail address the user registered with. Required.
	Email string `json:"email"`
	// Handle is the nickname for the user. Required.
	Handle string `json:"handle"`
	// Secret is the hex-encoded passphrase used to authenticate the user on future
	// requests. Required.
	Secret string `json:"secret"`
}

// DeleteUserRequest is the request object for IdentityService.DeleteUser.
type DeleteUserRequest struct {
	// Id is the identifier for the user to delete. Required.
	Id string `json:"id"`
	// Email is the e-mail address the user registered with. Optional - omit or set to
	// null if not using.
	Email *string `json:"email"`
}

// FetchUserRequest is the request object for IdentityService.FetchUser.
type FetchUserRequest struct {
	// Id is the identifier for the user to retrieve. Optional - omit or set to null if
	// not using.
	Id *string `json:"id"`
	// Email is the e-mail address for the user to retrieve. Optional - omit or set to
	// null if not using.
	Email *string `json:"email"`
	// Handle is the nickname for the user. Optional - omit or set to null if not
	// using.
	Handle *string `json:"handle"`
}

// UpdateUserRequest is the request object for IdentityService.UpdateUser.
type UpdateUserRequest struct {
	// Id is the identifier for the user to update. Required.
	Id string `json:"id"`
	// Email is the e-mail address the user registered with. Optional - omit or set to
	// null if not updating.
	Email *string `json:"email"`
	// Handle is the nickname for the user. Optional - omit or set to null if not
	// updating.
	Handle *string `json:"handle"`
	// Secret is the hex-encoded passphrase used to authenticate the user on future
	// requests. Optional - omit or set to null if not updating.
	Secret *string `json:"secret"`
}

// UserResponse is the response object containing the user's data if authenticated.
type UserResponse struct {
	// Id is the unique identifier for the user.
	Id string `json:"id"`
	// Email is the e-mail address the user registered with.
	Email string `json:"email"`
	// Handle is the nickname for the user.
	Handle string `json:"handle"`
	// Roles is the list of roles granted to the user.
	Roles []string `json:"roles"`
	// Error is string explaining what went wrong. Empty if everything was fine.
	Error string `json:"error,omitempty"`
}
