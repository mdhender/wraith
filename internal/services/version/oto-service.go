// Code generated by oto; DO NOT EDIT.

package version

import (
	"context"
	"net/http"

	"github.com/mdhender/wraith/internal/otohttp"
)

// VersionService makes nice greetings.
type VersionService interface {

	// Version returns the version of the engine.
	Version(context.Context, VersionRequest) (*VersionResponse, error)
}

type versionServiceServer struct {
	server         *otohttp.Server
	versionService VersionService
}

// Register adds the VersionService to the otohttp.Server.
func RegisterVersionService(server *otohttp.Server, versionService VersionService) {
	handler := &versionServiceServer{
		server:         server,
		versionService: versionService,
	}
	server.Register("VersionService", "Version", handler.handleVersion)
}

func (s *versionServiceServer) handleVersion(w http.ResponseWriter, r *http.Request) {
	var request VersionRequest
	if err := otohttp.Decode(r, &request); err != nil {
		s.server.OnErr(w, r, err)
		return
	}
	response, err := s.versionService.Version(r.Context(), request)
	if err != nil {
		s.server.OnErr(w, r, err)
		return
	}
	if err := otohttp.Encode(w, r, http.StatusOK, response); err != nil {
		s.server.OnErr(w, r, err)
		return
	}
}

// VersionRequest is the request object for VersionService.Version.
type VersionRequest struct {
	// Semver is a boolean.
	Semver bool `json:"semver"`
}

// VersionResponse is the response object containing a person's greeting.
type VersionResponse struct {
	// Version is the semantic version of the engine.
	Version string `json:"version"`
	// Error is string explaining what went wrong. Empty if everything was fine.
	Error string `json:"error,omitempty"`
}
