// Code generated by oto; DO NOT EDIT.

package main

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/json"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"strings"
	"time"

	"github.com/pkg/errors"
)

// Client is used to access Pace services.
type Client struct {
	// RemoteHost is the URL of the remote server that this Client should
	// access.
	RemoteHost string
	// HTTPClient is the http.Client to use when making HTTP requests.
	HTTPClient *http.Client
	// BeforeRequest is an optional hook that gives you the opportunity
	// to inspect or modify the request before it is made.
	// Useful for adding auth headers, for example.
	BeforeRequest func(r *http.Request) error
	// Debug writes a line of debug log output.
	Debug func(s string)
}

// New makes a new Client.
func New(remoteHost string) *Client {
	c := &Client{
		RemoteHost: remoteHost,
		Debug:      func(s string) {},
		HTTPClient: &http.Client{Timeout: 10 * time.Second},
	}
	return c
}

// AuthenticationService makes nice authentications.
type AuthenticationService struct {
	client *Client
}

// NewAuthenticationService makes a new client for accessing AuthenticationService services.
func NewAuthenticationService(client *Client) *AuthenticationService {
	return &AuthenticationService{
		client: client,
	}
}

// Authenticate validates the id and secret and returns a signed JWT if successful.
func (s *AuthenticationService) Authenticate(ctx context.Context, r AuthenticateRequest) (*AuthenticateResponse, error) {
	requestBodyBytes, err := json.Marshal(r)
	if err != nil {
		return nil, errors.Wrap(err, "AuthenticationService.Authenticate: marshal AuthenticateRequest")
	}
	url := s.client.RemoteHost + "AuthenticationService.Authenticate"
	s.client.Debug(fmt.Sprintf("POST %s", url))
	s.client.Debug(fmt.Sprintf(">> %s", string(requestBodyBytes)))
	req, err := http.NewRequest(http.MethodPost, url, bytes.NewReader(requestBodyBytes))
	if err != nil {
		return nil, errors.Wrap(err, "AuthenticationService.Authenticate: NewRequest")
	}
	req.Header.Set("Content-Type", "application/json")
	req.Header.Set("Accept-Encoding", "gzip")
	req = req.WithContext(ctx)
	if s.client.BeforeRequest != nil {
		err = s.client.BeforeRequest(req)
		if err != nil {
			// don't wrap this error, it belongs to the user
			return nil, err
		}
	}
	resp, err := s.client.HTTPClient.Do(req)
	if err != nil {
		return nil, errors.Wrap(err, "AuthenticationService.Authenticate")
	}
	defer resp.Body.Close()
	var response struct {
		AuthenticateResponse
		Error string
	}
	var bodyReader io.Reader = resp.Body
	if strings.Contains(resp.Header.Get("Content-Encoding"), "gzip") {
		decodedBody, err := gzip.NewReader(resp.Body)
		if err != nil {
			return nil, errors.Wrap(err, "AuthenticationService.Authenticate: new gzip reader")
		}
		defer decodedBody.Close()
		bodyReader = decodedBody
	}
	respBodyBytes, err := ioutil.ReadAll(bodyReader)
	if err != nil {
		return nil, errors.Wrap(err, "AuthenticationService.Authenticate: read response body")
	}
	if err := json.Unmarshal(respBodyBytes, &response); err != nil {
		if resp.StatusCode != http.StatusOK {
			return nil, errors.Errorf("AuthenticationService.Authenticate: (%d) %v", resp.StatusCode, string(respBodyBytes))
		}
		return nil, err
	}
	if response.Error != "" {
		return nil, errors.New(response.Error)
	}
	return &response.AuthenticateResponse, nil
}

// AuthenticateRequest is the request object for
// AuthenticationService.Authenticate.
type AuthenticateRequest struct {

	// Id is the account identifier to authenticate against.
	Id string `json:"id"`

	// Secret is the hex-encoded passphrase used to authenticate the request.
	Secret string `json:"secret"`
}

// AuthenticateResponse is the response object containing the signed JWT if
// authenticated.
type AuthenticateResponse struct {

	// Token is the signed JWT if the request is authenticated.
	Token string `json:"token"`
}
